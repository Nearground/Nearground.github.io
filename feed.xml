<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://nearground.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nearground.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-30T00:48:17+00:00</updated><id>https://nearground.github.io/feed.xml</id><title type="html">blank</title><subtitle>This is my personal website, where I keep my blog, portfolio, details on current projects, and my bookshelf </subtitle><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://nearground.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://nearground.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://nearground.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">How To Create a Personal Website and Blog for Free</title><link href="https://nearground.github.io/blog/2023/how-this-site-was-built/" rel="alternate" type="text/html" title="How To Create a Personal Website and Blog for Free"/><published>2023-08-30T01:11:44+00:00</published><updated>2023-08-30T01:11:44+00:00</updated><id>https://nearground.github.io/blog/2023/how-this-site-was-built</id><content type="html" xml:base="https://nearground.github.io/blog/2023/how-this-site-was-built/"><![CDATA[<h2 id="adding-a-headless-cms-to-your-jekyll-theme">Adding a headless CMS to your Jekyll theme</h2> <p>I want to share with you how I publish my blog to Github pages. It’s been a while since I originally wrote this article, titled “How to build your own website and host it for free”. However, most of the steps involved just a recap of setting up the Jekyll template <a href="https://github.com/alshedivat/al-folio">alshedivat/al-folio</a> <code class="language-plaintext highlighter-rouge">al-folio</code>. While it comes with its own set of quirks, most if not all of them can be solved by going searching in the discussions for your particular bug. One feature that is sorely missing from this template is the ability to edit and publish your own content, so this is what we’ll cover here. We will use a headless CMS called <a href="https://github.com/decaporg/decap-cms">Decap CMS</a>, and a CMS authentication system, both free for use.</p> <h2 id="decap-cms">Decap CMS</h2> <ol> <li>In the root folder, create an <code class="language-plaintext highlighter-rouge">admin</code> folder. We’ll add two files there:</li> </ol> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>admin
├ index.html
└ config.yml
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">index.html</code></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Admin</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/admin/</span>
<span class="na">subtitle</span><span class="pi">:</span> <span class="s">login screen for decap</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Login</span>
<span class="na">nav</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">nav_order</span><span class="pi">:</span> <span class="m">10</span>
<span class="na">dropdown</span><span class="pi">:</span> <span class="kc">false</span>
<span class="na">publish_mode</span><span class="pi">:</span> <span class="s">editorial_workflow</span>
<span class="na">media_folder</span><span class="pi">:</span> <span class="s2">"</span><span class="s">assets/uploads"</span>
<span class="nn">---</span>

<span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"robots"</span> <span class="na">content=</span><span class="s">"noindex"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;title&gt;</span>Content Manager<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="c">&lt;!-- Include the script that builds the page and powers Decap CMS --&gt;</span>
  <span class="nv">&lt;script src="https://unpkg.com/decap-cms@^3.0.0/dist/decap-cms.js"&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">config.yml</code></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>backend:
name: github
branch: master # Branch to update (optional; defaults to master)
repo: your-repo/your-repo.github.io

publish_mode: editorial_workflow
media_folder: "assets/img/uploads"
public_folder: static/media

collections:
<span class="p">
-</span> name: "blog" # Used in routes, e.g., /admin/collections/blog
  label: "Blog" # Used in the UI
  folder: "<span class="se">\_</span>posts" # The path to the folder where the documents are stored
  create: true # Allow users to create new documents in this collection
  slug: "---" # Filename template, e.g., YYYY-MM-DD-title.md
  fields: # The fields for each document, usually in front matter
<span class="p">
  -</span> {label: "Layout", name: "layout", widget: "hidden", default: "post"}
<span class="p">  -</span> {label: "Comments", name: "gisqus_comments", widget: "hidden", default: "true"}
<span class="p">  -</span> {label: "Title", name: "title", widget: "string"}
<span class="p">  -</span> {label: "Publish Date", name: "date", widget: "datetime"}
<span class="p">  -</span> {label: "Description", name: "description", widget: "string"}
<span class="p">  -</span> {label: "Body", name: "body", widget: "markdown"}
<span class="p">  -</span> {label: "Tags", name: "tags", widget: "markdown"}
<span class="p">  -</span> {label: "Categories", name: "categories", widget: "markdown"}
<span class="p">  -</span> {label: "related", name: "related_posts", widget: "hidden", default: "false"}
<span class="p">
-</span> name: "news"
  label: "News"
  folder: "posts"
  create: true
  fields:
<span class="p">  -</span> {label: "Layout", name: "layout", widget: "hidden", default: "post"}
<span class="p">  -</span> {label: "Comments", name: "gisqus_comments", widget: "hidden", default: "true"}
<span class="p">  -</span> {label: "Publish Date", name: "date", widget: "datetime"}
<span class="p">  -</span> {label: "Body", name: "body", widget: "markdown"}
<span class="p">  -</span> {label: "gisqus", name: "giscus_comments", widget: "hidden", default: "true"}
    inline: true
</code></pre></div></div> <p>This config file tells the CMS that we have two different collections of posts that we want to be able to create. It requires some kinds of fields, and others are conventions that <code class="language-plaintext highlighter-rouge">al-folio</code>’s posts already follow. You can add/edit to this list to some degree, like adding another collection for publishing your own book reviews.</p> <p>Once you rebuild the website with docker-compose, you’ll notice you have a login button on your site. It won’t work out of the box because we’re not on Netlify due to OAuth requirements, so we’ll create one ourselves.</p> <h4 id="adding-oauth">Adding OAuth</h4> <p>Luckily for us, we can run OAuth logic for free with the help of <code class="language-plaintext highlighter-rouge">sveltia</code>, a CMS authenticator that relies on an also-free Cloudflare workers script.</p> <p><a href="https://github.com/sveltia/sveltia-cms-auth">Follow this tutorial</a></p> <p>Make sure to follow the tutorial exactly, or you won’t be able to make sense of what went wrong.</p> <h4 id="conclusion">Conclusion</h4> <p>There ya go. If I’m missing something feel free to request it.</p>]]></content><author><name></name></author><category term="personal-site"/><category term="jekyll"/><category term="blog"/><summary type="html"><![CDATA[How to build a blog on Github Pages]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://nearground.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://nearground.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://nearground.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>