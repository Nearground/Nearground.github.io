<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://nearground.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nearground.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-31T21:39:01+00:00</updated><id>https://nearground.github.io/feed.xml</id><title type="html">blank</title><subtitle>This is my personal website, where I keep my blog, portfolio, details on current projects, and my bookshelf </subtitle><entry><title type="html">My Site is Up and Running again</title><link href="https://nearground.github.io/blog/2025/my-site-is-up-and-running-again/" rel="alternate" type="text/html" title="My Site is Up and Running again"/><published>2025-07-30T00:51:00+00:00</published><updated>2025-07-30T00:51:00+00:00</updated><id>https://nearground.github.io/blog/2025/my-site-is-up-and-running-again</id><content type="html" xml:base="https://nearground.github.io/blog/2025/my-site-is-up-and-running-again/"><![CDATA[<p>I’ve recently been obsessing over game design, especially procedural generation algorithms. One that caught my eye early on is called Wave Function Collapse. It’s a little bit of a sensationalist name, but it really is inspired after quantum mechanics. I’m working through a few tutorials on how to implement this on javascript so I can post it on the site, then I’ll make the leap to C# with Unity in order to use it for level generation. Lately, BorisTheBrave and InformationPhilosopher have been a giant source of inspiration. <a href="https://www.boristhebrave.com/">https://www.boristhebrave.com/</a> <a href="https://www.informationphilosopher.com/">https://www.informationphilosopher.com/</a></p>]]></content><author><name></name></author><category term="personal-site"/><category term="software-dev"/><category term="procgen"/><summary type="html"><![CDATA[Whoo!]]></summary></entry><entry><title type="html">How To Create a Personal Website and Blog for Free</title><link href="https://nearground.github.io/blog/2023/how-this-site-was-built/" rel="alternate" type="text/html" title="How To Create a Personal Website and Blog for Free"/><published>2023-08-30T01:11:44+00:00</published><updated>2023-08-30T01:11:44+00:00</updated><id>https://nearground.github.io/blog/2023/how-this-site-was-built</id><content type="html" xml:base="https://nearground.github.io/blog/2023/how-this-site-was-built/"><![CDATA[<h2 id="adding-a-headless-cms-to-your-jekyll-theme">Adding a headless CMS to your Jekyll theme</h2> <p>I want to share with you how I publish my blog to Github pages. It’s been a while since I originally wrote this article, titled “How to build your own website and host it for free”. However, most of the steps involved just a recap of setting up the Jekyll template <a href="https://github.com/alshedivat/al-folio">alshedivat/al-folio</a> <code class="language-plaintext highlighter-rouge">al-folio</code>. While it comes with its own set of quirks, most if not all of them can be solved by going searching in the discussions for your particular bug. One feature that is sorely missing from this template is the ability to edit and publish your own content, so this is what we’ll cover here. We will use a headless CMS called <a href="https://github.com/decaporg/decap-cms">Decap CMS</a>, and a CMS authentication system, both free for use.</p> <h2 id="decap-cms">Decap CMS</h2> <ol> <li>In the root folder, create an <code class="language-plaintext highlighter-rouge">admin</code> folder. We’ll add two files there:</li> </ol> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>admin
├ index.html
└ config.yml
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">index.html</code></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Admin</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/admin/</span>
<span class="na">subtitle</span><span class="pi">:</span> <span class="s">login screen for decap</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Login</span>
<span class="na">nav</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">nav_order</span><span class="pi">:</span> <span class="m">10</span>
<span class="na">dropdown</span><span class="pi">:</span> <span class="kc">false</span>
<span class="na">publish_mode</span><span class="pi">:</span> <span class="s">editorial_workflow</span>
<span class="na">media_folder</span><span class="pi">:</span> <span class="s2">"</span><span class="s">assets/uploads"</span>
<span class="nn">---</span>

<span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"robots"</span> <span class="na">content=</span><span class="s">"noindex"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;title&gt;</span>Content Manager<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="c">&lt;!-- Include the script that builds the page and powers Decap CMS --&gt;</span>
  <span class="nv">&lt;script src="https://unpkg.com/decap-cms@^3.0.0/dist/decap-cms.js"&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">config.yml</code></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>backend:
name: github
branch: main # Branch to update (whatever is your default branch. If left blank it uses master)
repo: your-repo/your-repo.github.io

publish_mode: editorial_workflow
media_folder: "assets/img/uploads"
public_folder: static/media

collections:
<span class="p">
-</span> name: "blog" # Used in routes, e.g., /admin/collections/blog
  label: "Blog" # Used in the UI
  folder: "<span class="se">\_</span>posts" # The path to the folder where the documents are stored
  create: true # Allow users to create new documents in this collection
  slug: "---" # Filename template, e.g., YYYY-MM-DD-title.md
  fields: # The fields for each document, usually in front matter
<span class="p">  -</span> {label: "Layout", name: "layout", widget: "hidden", default: "post"}
<span class="p">  -</span> {label: "Comments", name: "gisqus_comments", widget: "hidden", default: "true"}
<span class="p">  -</span> {label: "Title", name: "title", widget: "string"}
<span class="p">  -</span> {label: "Publish Date", name: "date", widget: "datetime"}
<span class="p">  -</span> {label: "Description", name: "description", widget: "string"}
<span class="p">  -</span> {label: "Body", name: "body", widget: "markdown"}
<span class="p">  -</span> {label: "Tags", name: "tags", widget: "markdown"}
<span class="p">  -</span> {label: "Categories", name: "categories", widget: "markdown"}
<span class="p">  -</span> {label: "related", name: "related_posts", widget: "hidden", default: "false"}
<span class="p">
-</span> name: "news"
  label: "News"
  folder: "posts"
  create: true
  fields:
<span class="p">  -</span> {label: "Layout", name: "layout", widget: "hidden", default: "post"}
<span class="p">  -</span> {label: "Comments", name: "gisqus_comments", widget: "hidden", default: "true"}
<span class="p">  -</span> {label: "Publish Date", name: "date", widget: "datetime"}
<span class="p">  -</span> {label: "Body", name: "body", widget: "markdown"}
<span class="p">  -</span> {label: "gisqus", name: "giscus_comments", widget: "hidden", default: "true"}
    inline: true
</code></pre></div></div> <p>This config file tells the CMS that we have two different collections of posts that we want to be able to create. It requires some kinds of fields, and others are conventions that <code class="language-plaintext highlighter-rouge">al-folio</code>’s posts already follow. You can add/edit to this list to some degree, like adding another collection for publishing your own book reviews.</p> <p>Once you rebuild the website with docker-compose, you’ll notice you have a login button on your site. It won’t work out of the box because we’re not on Netlify due to OAuth requirements, so we’ll create one ourselves.</p> <h4 id="adding-oauth">Adding OAuth</h4> <p>Luckily for us, we can run OAuth logic for free with the help of <code class="language-plaintext highlighter-rouge">sveltia</code>, a CMS authenticator that relies on an also-free Cloudflare workers script.</p> <p><a href="https://github.com/sveltia/sveltia-cms-auth">Follow this tutorial</a></p> <p>Make sure to follow the tutorial exactly, or you won’t be able to make sense of what went wrong.</p> <h4 id="conclusion">Conclusion</h4> <p>There ya go. If I’m missing something feel free to request it.</p>]]></content><author><name></name></author><category term="personal-site"/><category term="jekyll"/><category term="blog"/><summary type="html"><![CDATA[How to build a blog on Github Pages]]></summary></entry></feed>