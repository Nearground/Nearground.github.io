function getAxes(e){return new BidirectionalAxesHelper(e)}function getMinMaxArray(e){var t=e[0][0],n=e[0][1],a=e[0][2],r=e[0][0],o=e[0][1],c=e[0][2];for(i=0;i<e.length;i++)t=e[i][0]>t?e[i][0]:t,n=e[i][1]>n?e[i][1]:n,a=e[i][2]>a?e[i][2]:a,r=e[i][0]<r?e[i][0]:r,o=e[i][1]<o?e[i][1]:o,c=e[i][2]<c?e[i][2]:c;return[[r,o,c],[t,n,a]]}function addPoints(e){var t=[];for(i=0;i<e.length;i++)t.push(e[i][0],e[i][1],e[i][2]);const n=new THREE.BufferGeometry;n.setAttribute("position",new THREE.Float32BufferAttribute(t,3)),(e=new THREE.Points(n)).name="points",scene.add(e)}function drawLabel(e,t){const n=document.createElement("canvas"),a=n.getContext("2d"),r=e,i=60;a.font=`${i}px Arial`;const o=a.measureText(r);n.width=o.width,n.height=i,a.font=`${i}px Arial`,a.fillStyle="white",a.fillText(r,0,i);const c=new THREE.Texture(n);c.minFilter=THREE.LinearFilter,c.needsUpdate=!0;const d=new THREE.SpriteMaterial({map:c}),s=new THREE.Sprite(d);return s.position.set(t[0],t[1],t[2]),s}function drawAxes(e,t=[["","",""],["","",""]]){const n=new THREE.Group;n.name="axes",n.add(drawLabel(t[0][0],[e[0][0],0,0])),n.add(drawLabel(t[0][1],[e[1][0],0,0])),n.add(drawLabel(t[1][0],[0,e[0][1],0])),n.add(drawLabel(t[1][1],[0,e[1][1],0])),n.add(drawLabel(t[2][0],[0,0,e[0][2]])),n.add(drawLabel(t[2][1],[0,0,e[1][2]])),n.add(getAxes(e)),scene.add(n)}function getLine(e,t,n){const a=new THREE.LineBasicMaterial({color:n});var r=[];r.push(new THREE.Vector3(...e)),r.push(new THREE.Vector3(...t));const i=(new THREE.BufferGeometry).setFromPoints(r);return new THREE.Line(i,a)}function updateCameraDistance(e,t){e.left=e.bottom=-t,e.right=e.top=t,e.position.z=t,e.updateProjectionMatrix()}function getAverage(e){var t=e.length,n=Array(3);return n.fill(0),e.map((e=>n=addVectors(e,n))),[n[0]/t,n[1]/t,n[2]/t]}function addPointsAndAxes(e=3){var t=getMatrixValues(),n=[parseFloat(document.getElementById("x-mean").value),parseFloat(document.getElementById("y-mean").value),parseFloat(document.getElementById("z-mean").value)],a=parseInt(document.getElementById("sample-size").value);clearScene(scene);var r=generateSamplesCholesky(t,a,n,3),o=getAverage(r),c=PCA.getEigenVectors(r);c=c.map((e=>e.vector));var d=getMinMaxArray(r),s=[...d[0],...d[1]].map((e=>math.abs(e))),l=math.max(...s),m=["skyblue","red","yellow"];let u=new THREE.Group;u.name="eigenvectors";var p=getEigenVectorEndpoints(c,r,o);for(i=0;i<e;i++){var E=getLine(p[i][0],p[i][1],m[i]);u.add(E),u.add(drawLabel("-v"+(i+1),p[i][0])),u.add(drawLabel("v"+(i+1),p[i][1]))}return scene.add(u),drawAxes(d,[["-x","x"],["-y","y"],["-z","z"]]),addPoints(r),updateCameraDistance(camera,2*l),c}function getEigenVectorEndpoints(e,t,n){let a=t.map((e=>e.map(((e,t)=>e-n[t])))),r=[];for(let t=0;t<e.length;t++){let i=e[t],o=a.map((e=>e.reduce(((e,t,n)=>e+t*i[n]),0))),c=Math.min(...o),d=Math.max(...o),s=i.map(((e,t)=>n[t]+e*c)),l=i.map(((e,t)=>n[t]+e*d));r.push([s,l])}return r}function clearScene(e){for(;e.children.length>0;){const t=e.children[0];t.geometry&&t.geometry.dispose(),t.material&&(Array.isArray(t.material)?t.material.forEach((e=>e.dispose())):t.material.dispose()),e.remove(t)}}function clearPointsOnly(){var e=scene.getObjectByName("points");null!=e&&(scene.remove(e),e.geometry.dispose(),Array.isArray(e.material)?e.material.forEach((e=>e.dispose())):e.material.dispose())}function getMatrixValues(){var e=[];return document.querySelectorAll("#covariance-matrix tr").forEach((t=>{let n=t.querySelectorAll("input"),a=[];n.forEach((e=>{a.push(Number(e.value))})),e.push(a)})),e}function animate(){requestAnimationFrame(animate),controls.update(),renderer.render(scene,camera)}function changeCameraPosition(e){camera.position.x=e[0],camera.position.y=e[1],camera.position.z=e[2]}import*as THREE from"three";import{OrbitControls}from"three/addons/controls/OrbitControls";window.clearPointsOnly=clearPointsOnly,window.addPointsAndAxes=addPointsAndAxes;class BidirectionalAxesHelper extends THREE.LineSegments{constructor(e){const t=[e[0][0],0,0,e[1][0],0,0,0,e[0][1],0,0,e[1][1],0,0,0,e[0][2],0,0,e[1][2]],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],a=new THREE.BufferGeometry;a.setAttribute("position",new THREE.Float32BufferAttribute(t,3)),a.setAttribute("color",new THREE.Float32BufferAttribute(n,3));super(a,new THREE.LineBasicMaterial({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}}var initialCovarianceMatrix=[[10,2,5],[5,10,3],[1,2,10]];const matrixContainer=document.getElementById("covariance-matrix");initialCovarianceMatrix.forEach(((e,t)=>{let n=document.createElement("tr");e.forEach(((e,a)=>{let r=document.createElement("td"),i=document.createElement("input");i.type="number",i.value=e,i.dataset.row=t,i.dataset.col=a,r.appendChild(i),n.appendChild(r)})),matrixContainer.appendChild(n)}));const radius=10,center=new THREE.Vector3(0,0,0);let angle=0;var container=document.getElementById("sample-canvas");const scene=new THREE.Scene,camera=new THREE.OrthographicCamera(container.clientWidth/-2,container.clientWidth/2,container.clientWidth/2,container.clientWidth/-2,0,1e4);camera.position.x=0,camera.position.y=0,camera.position.z=10;const renderer=new THREE.WebGLRenderer;renderer.setSize(container.clientWidth,container.clientWidth),window.addEventListener("resize",(()=>{camera.updateProjectionMatrix(),renderer.setSize(container.clientWidth,container.clientWidth)})),document.getElementById("sample-canvas").appendChild(renderer.domElement);const controls=new OrbitControls(camera,renderer.domElement);controls.enableDamping=!0,controls.dampingFactor=.05,camera.updateProjectionMatrix(),addPointsAndAxes(3),animate();