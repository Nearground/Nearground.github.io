function createAxisLabel(e,t,n,a){var r=a.multiplyScalar(n);var i=new TextGeometry(t,{font:e,size:70,depth:20}),o=new THREE.Mesh(i);return o.name=t,o.geometry.translate(r.x,r.y,r.z),o}function createAxes(e){return new BidirectionalAxesHelper(e)}function addCholeskyPoints(e,t,n){const a=generateSamplesCholesky(e,t,n),r=[];var o=5,s=5,c=5,d=0,l=0,m=0;for(i=0;i<a.length;i++)o=a[i][0]>o?a[i][0]:o,s=a[i][1]>s?a[i][1]:s,c=a[i][2]>c?a[i][2]:c,d=a[i][0]<d?a[i][0]:d,l=a[i][1]<l?a[i][1]:l,m=a[i][2]<m?a[i][2]:m,r.push(a[i][0],a[i][1],a[i][2]);const u=new THREE.BufferGeometry;u.setAttribute("position",new THREE.Float32BufferAttribute(r,3));const E=(new THREE.TextureLoader).load("/assets/img/textures/sprites/disc.png"),p=new THREE.PointsMaterial({size:10,sizeAttenuation:!0,map:E,alphaTest:.5,transparent:!0,color:8947848}),h=new THREE.Points(u,p);return h.name="points",scene.add(h),[[d,l,m],[o,s,c]]}function drawAxesWithLabels(e){function t(e,t){const n=document.createElement("canvas"),a=n.getContext("2d"),r=e,i=60;a.font=`${i}px Arial`,a.fillStyle="white";const o=a.measureText(r);n.width=o.width,n.height=2*i,a.font=`${i}px Arial`,a.fillStyle="white",a.fillText(r,0,i);const s=new THREE.Texture(n);s.minFilter=THREE.LinearFilter,s.needsUpdate=!0;const c=new THREE.SpriteMaterial({map:s}),d=new THREE.Sprite(c);return d.position.set(t[0],t[1],t[2]),d}const n=new THREE.Group;n.name="axes",n.add(t("-x",[e[0][0],0,0])),n.add(t("-y",[0,e[0][1],0])),n.add(t("-z",[0,0,e[0][2]])),n.add(t("x",[e[1][0],0,0])),n.add(t("y",[0,e[1][1],0])),n.add(t("z",[0,0,e[1][2]])),n.add(createAxes(e)),scene.add(n)}function addUniformPoints(e,t){const n=[];for(let a=0;a<e;a++){const e=THREE.MathUtils.randFloatSpread(t)+t/2,a=THREE.MathUtils.randFloatSpread(t)+t/2,r=THREE.MathUtils.randFloatSpread(t)+t/2;n.push(e,a,r)}const a=new THREE.BufferGeometry;a.setAttribute("position",new THREE.Float32BufferAttribute(n,3));const r=new THREE.PointsMaterial({color:8947848}),i=new THREE.Points(a,r);scene.add(i)}function add3DBox(e,t,n){const a=new THREE.BoxGeometry(e,t,n),r=new THREE.MeshNormalMaterial,i=new THREE.Mesh(a,r);scene.add(i)}function drawLine(){const e=new THREE.BufferGeometry,t=new Float32Array([0,0,0,20,10,0,40,-10,0,60,0,0]);e.setAttribute("position",new THREE.BufferAttribute(t,3));const n=new Float32Array([1,0,0,1,1,0,0,1,1,0,0,1]);e.setAttribute("color",new THREE.BufferAttribute(n,3));const a=new THREE.LineBasicMaterial({vertexColors:!0,linewidth:4}),r=new THREE.Line(e,a);r.computeLineDistances(),scene.add(r)}function updateCameraDistance(e,t){e.left=e.bottom=-t,e.right=e.top=t,e.position.z=t,e.updateProjectionMatrix()}function addPointsAndAxes(){var e=getMatrixValues(),t=[parseFloat(document.getElementById("x-mean").value),parseFloat(document.getElementById("y-mean").value),parseFloat(document.getElementById("z-mean").value)],n=parseInt(document.getElementById("sample-size").value);clearScene(scene);var a=addCholeskyPoints(e,n,t);const r=[...a[0],...a[1]].map((e=>math.abs(e))),i=math.max(...r);drawAxesWithLabels(a),updateCameraDistance(camera,1.1*i)}function clearObjectFromMemory(e){scene.remove(e),e.geometry.dispose(),Array.isArray(e.material)?e.material.forEach((e=>e.dispose())):e.material.dispose()}function clearScreen(){scene.traverse((function(e){clearObjectFromMemory(e)}))}function clearScene(e){for(;e.children.length>0;){const t=e.children[0];t.geometry&&t.geometry.dispose(),t.material&&(Array.isArray(t.material)?t.material.forEach((e=>e.dispose())):t.material.dispose()),e.remove(t)}}function clearPointsOnly(){var e=scene.getObjectByName("points");null!=e&&(scene.remove(e),e.geometry.dispose(),Array.isArray(e.material)?e.material.forEach((e=>e.dispose())):e.material.dispose())}function getMatrixValues(){const e=[];return document.querySelectorAll("#covariance-matrix tr").forEach((t=>{const n=t.querySelectorAll("input"),a=[];n.forEach((e=>{a.push(Number(e.value))})),e.push(a)})),e}function animate(){requestAnimationFrame(animate),angle-=.01,camera.position.x=center.x+radius*Math.cos(angle),camera.position.z=center.z+radius*Math.sin(angle),camera.lookAt(center),controls.update(),renderer.render(scene,camera)}import*as THREE from"three";import{OrbitControls}from"three/addons/controls/OrbitControls";import{TextGeometry}from"three/addons/geometries/TextGeometry.js";window.clearPointsOnly=clearPointsOnly,window.addPointsAndAxes=addPointsAndAxes;class BidirectionalAxesHelper extends THREE.LineSegments{constructor(e){const t=[e[0][0],0,0,e[1][0],0,0,0,e[0][1],0,0,e[1][1],0,0,0,e[0][2],0,0,e[1][2]],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],a=new THREE.BufferGeometry;a.setAttribute("position",new THREE.Float32BufferAttribute(t,3)),a.setAttribute("color",new THREE.Float32BufferAttribute(n,3));super(a,new THREE.LineBasicMaterial({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}}var data=[[40,50,60],[50,70,60],[80,70,90],[50,60,80]];let matrix=[[4,12,-16],[12,37,-43],[-16,-43,98]];var initialCovarianceMatrix=[[40,12,120.9],[22,30,0],[18.9,0,45]];const matrixContainer=document.getElementById("covariance-matrix");initialCovarianceMatrix.forEach(((e,t)=>{const n=document.createElement("tr");e.forEach(((e,a)=>{const r=document.createElement("td"),i=document.createElement("input");i.type="number",i.value=e,i.dataset.row=t,i.dataset.col=a,r.appendChild(i),n.appendChild(r)})),matrixContainer.appendChild(n)}));const radius=10,center=new THREE.Vector3(0,0,0);let angle=0;var container=document.getElementById("sample-canvas"),vectors=PCA.getEigenVectors(data),foo=math.round(math.e,3);const deviationMatrix=PCA.computeDeviationMatrix(data),svd=PCA.computeSVD(deviationMatrix),scene=new THREE.Scene;var sampleSize=500,sampleSpread=100,meanVector=[0,0,0];const camera=new THREE.OrthographicCamera(container.clientWidth/-2,container.clientWidth/2,container.clientWidth/2,container.clientWidth/-2,0,1e4);camera.position.x=0,camera.position.y=0,camera.position.z=10;const renderer=new THREE.WebGLRenderer;renderer.setSize(container.clientWidth,container.clientWidth),window.addEventListener("resize",(()=>{camera.updateProjectionMatrix(),renderer.setSize(container.clientWidth,container.clientWidth)})),document.getElementById("sample-canvas").appendChild(renderer.domElement);const controls=new OrbitControls(camera,renderer.domElement);controls.enableDamping=!0,controls.dampingFactor=.05,camera.updateProjectionMatrix(),addPointsAndAxes(),animate();