!function(){function t(e,i,n){function o(s,h){if(!i[s]){if(!e[s]){var a="function"==typeof require&&require;if(!h&&a)return a(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var x=i[s]={exports:{}};e[s][0].call(x.exports,(function(t){return o(e[s][1][t]||t)}),x,x.exports,t,e,i,n)}return i[s].exports}for(var r="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}return t}()({1:[function(t){const e=64,i=32,n=new(t("convchain-gpu"))([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]);n.setField(e,i);const o=n.iterate(9,3,.5).getUint8Array();for(let t=0;t<i;t++){let i="";for(let n=0;n<e;n++)i+=" "+o[n+t*e]}},{"convchain-gpu":2}],2:[function(t,e){"use strict";function i(t,e){this.context=new r,this.textureWeights=null,this.texturesField=null,this.width=16,this.height=16,this.createProgram(),this.setSample(t,e)}function n(t,e,i,n,o){function r(t){const e=new Array(o*o);for(let i=0;i<o;i++)for(let n=0;n<o;n++)e[n+i*o]=t(n,i);return e}function s(t){return r((function(e,i){return t[o-1-i+e*o]}))}function h(t){return r((function(e,i){return t[o-1-e+i*o]}))}function a(t){let e=0,i=1;for(let n=0;n<t.length;n++)e+=t[t.length-1-n]?i:0,i*=2;return e}const c=1<<o*o,x=Math.min(1024,c),u=Math.max(1,c/x),l=new Float32Array(4*x*u);for(let t=0;t<n;t++)for(let o=0;o<i;o++){const c=r((function(r,s){return e[(o+r)%i+(t+s)%n*i]})),x=s(c),u=s(x),f=s(u),d=h(c),p=h(x),m=h(u),g=h(f);l[4*a(c)]+=1,l[4*a(x)]+=1,l[4*a(u)]+=1,l[4*a(f)]+=1,l[4*a(d)]+=1,l[4*a(p)]+=1,l[4*a(m)]+=1,l[4*a(g)]+=1}for(let t=0;t<c;t++)l[4*t]<=0&&(l[4*t]=.1);return t.createTextureFromArray(l,x,u,!1)}function o(t,e,i){const n=new Float32Array(e*i*4);for(let t=0;t<e*i;t++)n[4*t]=Math.random()<.5;return[t.createTextureFromArray(n,e,i,!0),t.createTextureFromArray(n,e,i,!0)]}const r=t("./webgl2/context");i.prototype.createProgram=function(){this.program=this.context.createProgram("\n    in vec3 position;\n\n    void main() {\n        gl_Position = vec4(position, 1.0);\n    }\n    ","\n    layout(location = 0) out vec4 fragColor;\n\n    uniform sampler2D weights;\n    uniform sampler2D field;\n    uniform vec2 resolution;\n    uniform float temperature;\n    uniform float n;\n    uniform float iteration;\n    uniform float seed;\n\n    #define rng() fract(seed * iteration * iteration * 0.1981 + 1. + sin(seed * 1453. + dot(gl_FragCoord.xy, vec2(12.9898, 4.1414 + sin(seed * 4801. + iteration*0.1393)))) * 43758.5453)\n    #define pixelPicking(n,coord,frame) (mod(floor(n*n*0.5+1.)*frame, n*n) == mod(floor(coord.x), n) + mod(floor(coord.y), n) * n)\n\n    #define getFieldValue(coord) round(mod(texelFetch(field, ivec2(coord.xy), 0).r + 0.00001, 2.))\n    #define getRawFieldValue(coord) round(texelFetch(field, ivec2(coord.xy), 0).r + 0.00001)\n    #define getWeightValue(index) texelFetch(weights, ivec2(mod(index, 1024.), floor((index) / 1024.)), 0).r\n\n    float convchain (vec2 coord) {\n      float q = 1.;\n      float value = getRawFieldValue(coord);\n\n      for (float syo = 1. - n; syo <= n - 1.; syo++) {\n        for (float sxo = 1. - n; sxo <= n - 1.; sxo++) {\n          float ind = 0.;\n          float difference = 0.;\n\n          for (float dy = 0.; dy < n; dy++) {\n            for (float dx = 0.; dx < n; dx++) {\n              float power = pow(2., dy * n + dx);\n              vec2 ncoord = mod(coord + vec2(sxo + dx, syo + dy) + resolution.xy, resolution.xy);\n\n              float nvalue = getFieldValue(ncoord);\n\n              ind = ind + nvalue * power;\n\n              if (ncoord.xy == coord.xy) {\n                difference = mix(-power, power, nvalue);\n              }\n            }\n          }\n\n          q = q * getWeightValue(ind - difference) / getWeightValue(ind);\n        }\n      }\n\n      if (value < 1.5 && pow(q, 1. / temperature) > rng()) {\n        value = abs(value - 1.);\n      }\n\n      return value;\n    }\n\n    void main () {\n      fragColor = pixelPicking(n, gl_FragCoord, iteration) ?\n        vec4(convchain(floor(gl_FragCoord.xy)), 0., 0., 1.) :\n        vec4(getRawFieldValue(floor(gl_FragCoord.xy)), 0., 0., 1.);\n    }\n    ",{resolution:"2f",weights:"t",field:"t",temperature:"f",n:"f",iteration:"f",seed:"f"})},i.prototype.setSample=function(t,e){if("number"==typeof t[0])this.sample=t,e?(this.sampleWidth="number"==typeof e?e:e[0],this.sampleHeight="number"==typeof e?e:e[1]):this.sampleWidth=this.sampleHeight=0|Math.sqrt(t.length);else{this.sampleWidth=t[0].length,this.sampleHeight=t.length;const e=new Uint8Array(this.sampleWidth*this.sampleHeight);for(let i=0;i<this.sampleHeight;i++)for(let n=0;n<this.sampleWidth;n++)e[n+i*this.sampleWidth]=t[i][n];this.sample=e}return this.cachedN=null,this},i.prototype.getWeights=function(t){if(t<2||t>4)throw new Error("ConvChainGPU: the receptor size must be in the [2, 4] range.");return this.cachedN!==t&&(this.textureWeights&&this.textureWeights.dispose(),this.cachedN=t,this.textureWeights=n(this.context,this.sample,this.sampleWidth,this.sampleHeight,t)),this.textureWeights},i.prototype.setField=function(t,e,i){if(i&&i.length!==t*e)throw new Error("ConvChainGPU: Incorrect size for provided values.");if(t<4)throw new Error("ConvChainGPU: Field width must be > 3.");if(e<4)throw new Error("ConvChainGPU: Field height must be > 3.");if(this.texturesField&&(this.texturesField[0].dispose(),this.texturesField[1].dispose(),this.texturesField=null),this.iteration=0,this.width=0|t,this.height=0|e,i){const t=new Float32Array(this.width*this.height*4);for(let e=0;e<this.width*this.height;e++)t[4*e]=Math.max(0,Math.round(i[e%this.width+(this.height-(e/this.width|0)-1)*this.width]));this.texturesField=[this.context.createTextureFromArray(t,this.width,this.height,!0),this.context.createTextureFromArray(t,this.width,this.height,!0)]}return this},i.prototype.iterate=function(t,e,i,n){null===this.texturesField&&(this.texturesField=o(this.context,this.width,this.height)),n=n||0;const r=this.getWeights(e);let s,h;for(let o=0;o<t;o++)s=this.texturesField[this.iteration%2],h=this.texturesField[(this.iteration+1)%2],this.context.draw(this.program,{field:h,weights:r,resolution:[this.width,this.height],temperature:i,n:e,iteration:this.iteration,seed:n},s),this.iteration++;return s},i.prototype.dispose=function(){this.context&&(this.texturesField&&(this.texturesField[0].dispose(),this.texturesField[1].dispose()),this.textureWeights&&this.textureWeights.dispose(),this.program.dispose(),this.context.dispose(),this.texturesField=null,this.context=null,this.textureWeights=null,this.program=null)},i.isSupported=function(){return r.isSupported()},e.exports=i},{"./webgl2/context":3}],3:[function(t,e){"use strict";function i(){this.canvas=document.createElement("canvas"),this.width=this.canvas.width=this.height=this.canvas.height=32;const t={alpha:!1,antialias:!1,depth:!1,stencil:!1,powerPreference:"high-performance",premultipliedAlpha:!1,preserveDrawingBuffer:!1};this.context=this.canvas.getContext("webgl2",t),this.context.getExtension("EXT_color_buffer_float"),this.context.disable(this.context.DITHER),this.context.disable(this.context.DEPTH_TEST),this.context.disable(this.context.BLEND),this.defaultTexture=this.context.createTexture(),this.context.bindTexture(this.context.TEXTURE_2D,this.defaultTexture),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA,1,1,0,this.context.RGBA,this.context.UNSIGNED_BYTE,new Uint8Array([0,0,0,1])),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MAG_FILTER,this.context.NEAREST),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.NEAREST),this.positionBuffer=this.context.createBuffer(),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.positionBuffer),this.context.bufferData(this.context.ARRAY_BUFFER,r,this.context.STATIC_DRAW)}const n=t("./texture"),o=t("./program"),r=new Float32Array([-1,-1,0,-1,4,0,4,-1,0]);i.prototype.setCanvasSize=function(t,e){this.width=this.canvas.width=t,this.height=this.canvas.height=e,this.context.viewport(0,0,this.width,this.height)},i.prototype.draw=function(t,e,i){i?(this.context.viewport(0,0,i.width,i.height),this.context.bindFramebuffer(this.context.FRAMEBUFFER,i.getFrameBuffer())):(this.context.viewport(0,0,this.width,this.height),this.context.bindFramebuffer(this.context.FRAMEBUFFER,null)),this.lastUsedProgram!==t&&(this.context.useProgram(t.getProgram()),this.lastUsedProgram=t);for(let i=0;i<t.uniformsInfo.length;i++){const n=t.uniformsInfo[i],o="undefined"===typeof e[n.id]?n.defaultValue:e[n.id];this.context[n.method].apply(this.context,[n.location].concat(o))}for(let i=0;i<t.texturesInfo.length;i++){const n=t.texturesInfo[i],o=e[n.id];this.context.activeTexture(n.textureUnit),this.context.bindTexture(this.context.TEXTURE_2D,o&&o.isReady()?o.getTexture():this.defaultTexture),this.context.uniform1i(n.location,n.textureNumber)}this.context.vertexAttribPointer(t.positionAttribute,3,this.context.FLOAT,!1,0,0),this.context.drawArrays(this.context.TRIANGLES,0,3),this.context.finish()},i.prototype.loadTextureImage=function(t){const e=new n(this.context),i=document.createElement("img");return i.onload=()=>{e.initializeFromImage(i)},i.src=t,e},i.prototype.createTextureFromArray=function(t,e,i,o){const r=new n(this.context);return r.initializeFromArray(t,e,i,o),r},i.prototype.createProgram=function(t,e,i){return new o(this.context,t,e,i)},i.prototype.dispose=function(){const t=this.context.getExtension("WEBGL_lose_context");this.context.deleteBuffer(this.positionBuffer),t&&t.loseContext(),this.positionBuffer=null,this.context=null},i.isSupported=function(){const t=document.createElement("canvas");t.width=t.height=32;const e=t.getContext("webgl2"),i=e?e.getExtension("EXT_color_buffer_float"):null,n=e?e.getExtension("WEBGL_lose_context"):null,o=!!e&&!!i;return n&&n.loseContext(),o},e.exports=i},{"./program":4,"./texture":5}],4:[function(t,e){"use strict";function i(t,e,i,n,o){this.context=t,this.initialize(e,i,n,o)}const n={f:{method:"uniform1f",defaultValue:0},"2f":{method:"uniform2f",defaultValue:[0,0]},"3f":{method:"uniform3f",defaultValue:[0,0,0]},"4f":{method:"uniform4f",defaultValue:[0,0,0,0]}};i.prototype.initialize=function(t,e,i){const o="highp";t=`#version 300 es\n    precision ${o} float;\n    precision ${o} int;\n\n    ${t}\n  `,e=`#version 300 es\n    precision ${o} float;\n    precision ${o} int;\n    precision ${o} sampler2D;\n\n    ${e}\n  `,this.vertexShader=this.createShader(this.context.VERTEX_SHADER,t),this.fragmentShader=this.createShader(this.context.FRAGMENT_SHADER,e),this.program=this.context.createProgram(),this.context.attachShader(this.program,this.vertexShader),this.context.attachShader(this.program,this.fragmentShader),this.context.linkProgram(this.program);const r=Object.keys(i);this.uniformsInfo=[],this.texturesInfo=[];let s=0;for(let t=0;t<r.length;t++){const e=r[t],o=i[e];"t"===o?(this.texturesInfo.push({id:e,textureNumber:s,textureUnit:this.context["TEXTURE"+s],location:this.context.getUniformLocation(this.program,e)}),s++):this.uniformsInfo.push({id:e,method:n[o].method,defaultValue:n[o].defaultValue,location:this.context.getUniformLocation(this.program,e)})}this.positionAttribute=this.context.getAttribLocation(this.program,"position"),this.context.enableVertexAttribArray(this.positionAttribute)},i.prototype.createShader=function(t,e){const i=this.context.createShader(t);if(this.context.shaderSource(i,e),this.context.compileShader(i),!this.context.getShaderParameter(i,this.context.COMPILE_STATUS))throw new Error("Error creating shader : "+this.context.getShaderInfoLog(i)+"\n"+e);return i},i.prototype.getProgram=function(){return this.program},i.prototype.dispose=function(){this.context.deleteProgram(this.program),this.context.deleteShader(this.vertexShader),this.context.deleteShader(this.fragmentShader),this.program=null,this.vertexShader=null,this.fragmentShader=null,this.context=null},e.exports=i},{}],5:[function(t,e){"use strict";function i(t){this.context=t,this.ready=!1,this.floatArray=null}i.prototype.initializeFromImage=function(t){null!==this.context&&(this.width=t.naturalWidth||t.width,this.height=t.naturalHeight||t.height,this.texture=this.context.createTexture(),this.context.bindTexture(this.context.TEXTURE_2D,this.texture),this.context.pixelStorei(this.context.UNPACK_FLIP_Y_WEBGL,!0),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA,this.context.RGBA,this.context.UNSIGNED_BYTE,t),this.context.pixelStorei(this.context.UNPACK_FLIP_Y_WEBGL,!1),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MAG_FILTER,this.context.LINEAR),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.LINEAR),this.context.bindTexture(this.context.TEXTURE_2D,null),this.ready=!0)},i.prototype.initializeFromArray=function(t,e,i,n){null!==this.context&&(this.width=e,this.height=i,this.texture=this.context.createTexture(),this.context.bindTexture(this.context.TEXTURE_2D,this.texture),this.context.pixelStorei(this.context.UNPACK_FLIP_Y_WEBGL,!1),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA32F,this.width,this.height,0,this.context.RGBA,this.context.FLOAT,t),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MAG_FILTER,this.context.NEAREST),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.NEAREST),n&&(this.frameBuffer=this.context.createFramebuffer(),this.context.bindFramebuffer(this.context.FRAMEBUFFER,this.frameBuffer),this.context.framebufferTexture2D(this.context.FRAMEBUFFER,this.context.COLOR_ATTACHMENT0,this.context.TEXTURE_2D,this.texture,0),this.context.bindFramebuffer(this.context.FRAMEBUFFER,null)),this.context.bindTexture(this.context.TEXTURE_2D,null),this.ready=!0)},i.prototype.getUint8Array=function(){const t=4*this.width*this.height,e=this.floatArray&&this.floatArray.length===t?this.floatArray:new Float32Array(4*this.width*this.height),i=new Uint8Array(this.width*this.height);this.context.bindFramebuffer(this.context.FRAMEBUFFER,this.frameBuffer),this.context.readPixels(0,0,this.width,this.height,this.context.RGBA,this.context.FLOAT,e,0),this.context.bindFramebuffer(this.context.FRAMEBUFFER,null);for(let t=0;t<i.length;t++)i[t%this.width+(this.height-(t/this.width|0)-1)*this.width]=Math.round(e[4*t]);return this.floatArray=e,i},i.prototype.isReady=function(){return this.ready},i.prototype.getTexture=function(){return this.texture},i.prototype.getFrameBuffer=function(){return this.frameBuffer},i.prototype.dispose=function(){this.frameBuffer&&this.context.deleteFramebuffer(this.frameBuffer),this.context.deleteTexture(this.texture),this.texture=null,this.frameBuffer=null,this.context=null},e.exports=i},{}]},{},[1]);