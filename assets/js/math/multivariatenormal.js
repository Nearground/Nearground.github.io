function choleskyDecomposition(t){let r=t.length,e=Array.from({length:r},(()=>Array(r).fill(0)));for(let o=0;o<r;o++)for(let r=0;r<=o;r++){let n=0;if(r===o){for(let t=0;t<r;t++)n+=Math.pow(e[r][t],2);e[r][r]=0|Math.sqrt(t[r][r]-n)}else{for(let t=0;t<r;t++)n+=e[o][t]*e[r][t];e[o][r]=(t[o][r]-n)/e[r][r]|0}}for(let t=0;t<r;t++);return e}function multiplyMatrixVector(t,r){const e=t.length,o=t[0].length;if(o!==r.length)throw new Error("Matrix columns must match vector length for multiplication.");const n=new Array(e).fill(0);for(let a=0;a<e;a++){let e=0;for(let n=0;n<o;n++)e+=t[a][n]*r[n];n[a]=e}return n}function icdf(t){var r=-Math.log((1-t)*(1+t));return(r<5?1.50140941+(.246640727+(((.00021858087+(((3.43273939e-7+2.81022636e-8*(r-=2.5))*r-35233877e-13)*r-439150654e-14)*r)*r-.00125372503)*r-.00417768164)*r)*r:2.83297682+(1.00167406+(.00943887047+((.00573950773+((.00134934322+(.000100950558+-.000200214257*(r=math.sqrt(r)-3))*r)*r-.00367342844)*r)*r-.0076224613)*r)*r)*r)*t}function standardNormalVector(t){for(var r=[],e=0;e<t;e++)r.push(icdf(2*Math.random()-1));return r}function addVectors(t,r){if(t.length!==r.length)throw new Error("Vectors must have the same dimension to be added.");const e=[];for(let o=0;o<t.length;o++)e[o]=t[o]+r[o];return e}function generateSamplesCholesky(t,r,e){var o=[];for(i=0;i<r;i++)o.push(standardNormalVector(3));var n=[],a=choleskyDecomposition(t);for(i=0;i<r;i++){var l=multiplyMatrixVector(a,o[i]);l=addVectors(l,e),n.push(l)}return n}function generateSamplesICDF(t,r,e){var o=[];for(i=0;i<r;i++){var n=multiplyMatrixVector(t,[icdf(Math.Random)*e[0],icdf(Math.Random)*e[1],icdf(Math.Random)*e[2]]);o.push(n)}return o}var standardNormal=standardNormalVector(3);