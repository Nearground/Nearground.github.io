function choleskyDecomposition(t){let r=t.length,e=Array.from({length:r},(()=>Array(r).fill(0)));for(let n=0;n<r;n++)for(let r=0;r<=n;r++){let o=0;if(r===n){for(let t=0;t<r;t++)o+=Math.pow(e[r][t],2);e[r][r]=0|Math.sqrt(t[r][r]-o)}else{for(let t=0;t<r;t++)o+=e[n][t]*e[r][t];e[n][r]=(t[n][r]-o)/e[r][r]|0}}for(let t=0;t<r;t++);return e}function multiplyMatrices(t,r){const e=t.length,n=t[0].length,o=r.length,l=r[0].length;if(n!==o)throw new Error("Matrices cannot be multiplied: Number of columns in the first matrix must equal the number of rows in the second matrix.");const i=Array(e).fill(0).map((()=>Array(l).fill(0)));for(let o=0;o<e;o++)for(let e=0;e<l;e++)for(let l=0;l<n;l++)i[o][e]+=t[o][l]*r[l][e];return i}function multiplyMatrices(t,r){const e=!Array.isArray(r[0]),n=t.length,o=t[0].length;if(e){if(r.length!==o)throw new Error("Matrix columns must match vector length.");const e=[];for(let l=0;l<n;l++){let n=0;for(let e=0;e<o;e++)n+=t[l][e]*r[e];e.push(n)}return e}{const e=r.length,l=r[0].length;if(o!==e)throw new Error("Matrix dimensions are not compatible for multiplication.");const i=Array.from({length:n},(()=>Array(l).fill(0)));for(let e=0;e<n;e++)for(let n=0;n<l;n++)for(let l=0;l<o;l++)i[e][n]+=t[e][l]*r[l][n];return i}}function multiplyMatrixVector(t,r){const e=t.length,n=t[0].length;if(n!==r.length)throw new Error("Matrix columns must match vector length for multiplication.");const o=new Array(e).fill(0);for(let l=0;l<e;l++){let e=0;for(let o=0;o<n;o++)e+=t[l][o]*r[o];o[l]=e}return o}function divideVectors(t,r){if(!Array.isArray(t)||!Array.isArray(r)||t.length!==r.length)throw new Error("Both inputs must be arrays of the same length.");const e=[];for(let n=0;n<t.length;n++){if(0===r[n])throw new Error("Division by zero encountered at index "+n);e.push(t[n]/r[n])}return e}function icdf(t){var r=-Math.log((1-t)*(1+t));return(r<5?1.50140941+(.246640727+(((.00021858087+(((3.43273939e-7+2.81022636e-8*(r-=2.5))*r-35233877e-13)*r-439150654e-14)*r)*r-.00125372503)*r-.00417768164)*r)*r:2.83297682+(1.00167406+(.00943887047+((.00573950773+((.00134934322+(.000100950558+-.000200214257*(r=math.sqrt(r)-3))*r)*r-.00367342844)*r)*r-.0076224613)*r)*r)*r)*t}function standardNormalVector(t){for(var r=[],e=0;e<t;e++)r.push(icdf(2*Math.random()-1));return r}function subtractVectors(t,r){if(t.length!==r.length)throw new Error("Vectors must have the same dimension to be added.");const e=[];for(let n=0;n<t.length;n++)e[n]=t[n]-r[n];return e}function addVectors(t,r){if(t.length!==r.length)throw new Error("Vectors must have the same dimension to be added.");const e=[];for(let n=0;n<t.length;n++)e[n]=t[n]+r[n];return e}function generateSamplesCholesky(t,r,e,n){var o=[];for(i=0;i<r;i++)o.push(standardNormalVector(n));var l=[];for(i=0;i<r;i++){var a=multiplyMatrixVector(t,o[i]);a=addVectors(a,e),l.push(a)}return l}function isOrthogonal(t,r=1e-10){for(let e=0;e<t.length;e++)for(let n=e+1;n<t.length;n++){let o=0;for(let r=0;r<t[e].length;r++)o+=t[e][r]*t[n][r];if(Math.abs(o)>r)return!1}return!0}